# -*- coding: utf-8 -*-
"""Spam_Email_Neural_Network.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12zmzDwBJqA9teadH3Hhw_MKr4GpuK-8Y
"""

import pandas as pd
import numpy as np
import sklearn
dataset = pd.read_csv("/content/sms_spam_dataset.csv")
x = dataset["message"]
y = dataset["label"]

dataset.head()

dataset.info()

dataset.drop_duplicates(inplace= True)
dataset.dropna(inplace= True)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
dataset['label'] = le.fit_transform(dataset['label'])

dataset.head()

import nltk
from nltk.corpus import stopwords
nltk.download('stopwords')

import string
def processing(message):
  no_punc= [char for char in message if char not in string.punctuation]
  no_punc= ''.join(no_punc)

  clean_words= [word for word in no_punc.split() if word.lower() not in stopwords.words('english')]
  return clean_words

dataset['message'].apply(processing)

from sklearn.feature_extraction.text import TfidfVectorizer
vectorizer = TfidfVectorizer(max_features=5000)
x_tfidf = vectorizer.fit_transform(dataset['message']).toarray()

y = dataset['label'].values

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x_tfidf, y, test_size=0.2, random_state=0)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from sklearn.metrics import classification_report, accuracy_score

model = Sequential([
    Dense(512, activation='relu', input_shape=(x_train.shape[1],)),
    Dropout(0.3),
    Dense(256, activation='relu'),
    Dropout(0.3),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy')

model.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_test, y_test))

from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score,
    confusion_matrix, roc_auc_score, mean_squared_error, mean_absolute_error
)

y_pred_prob = model.predict(x_test).flatten()
y_pred = (y_pred_prob > 0.5).astype(int)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\n")
print("Precision:", precision_score(y_test, y_pred))
print("\n")
print("Recall:", recall_score(y_test, y_pred))
print("\n")
print("F1 Score:", f1_score(y_test, y_pred))
print("\n")
print("MSE:", mean_squared_error(y_test, y_pred_prob))
print("\n")
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

def predict_message(message):
    cleaned_msg = message.lower()
    msg_vector = vectorizer.transform([cleaned_msg]).toarray()
    prediction_prob = model.predict(msg_vector)[0][0]
    prediction = "SPAM" if prediction_prob > 0.5 else "NOT SPAM"
    print(f"Prediction: {prediction}")

user_msg = input("Enter a message: ")
predict_message(user_msg)